import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import scipy.stats as stats

# Generate random data for heights and weights
np.random.seed(0)
heights = np.random.normal(loc=170, scale=10, size=50)
weights = np.random.normal(loc=70, scale=5, size=50)

# Create a DataFrame for the dataset
data = pd.DataFrame({'Height': heights, 'Weight': weights})

# Descriptive Statistics
mean_height = data['Height'].mean()
median_height = data['Height'].median()
std_height = data['Height'].std()
range_height = data['Height'].max() - data['Height'].min()

mean_weight = data['Weight'].mean()
median_weight = data['Weight'].median()
std_weight = data['Weight'].std()
range_weight = data['Weight'].max() - data['Weight'].min()

# Probability
event_height = data['Height'] > 180
probability_taller = len(data[event_height]) / len(data)

# Distributions - Histograms
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.hist(data['Height'], bins=10, color='blue', alpha=0.7)
plt.title('Histogram of Heights')
plt.xlabel('Height')
plt.ylabel('Frequency')

plt.subplot(1, 2, 2)
plt.hist(data['Weight'], bins=10, color='green', alpha=0.7)
plt.title('Histogram of Weights')
plt.xlabel('Weight')
plt.ylabel('Frequency')

plt.tight_layout()
plt.show()

# Central Limit Theorem (CLT)
sample_means = []
for _ in range(1000):
    sample = np.random.choice(data['Height'], size=30)
    sample_means.append(sample.mean())

# Plot distribution of sample means
plt.figure(figsize=(8, 6))
plt.hist(sample_means, bins=30, color='orange', alpha=0.7)
plt.title('Distribution of Sample Means (CLT)')
plt.xlabel('Sample Mean')
plt.ylabel('Frequency')
plt.show()

# Confidence Interval (CI)
confidence_interval = stats.norm.interval(0.95, loc=mean_height, scale=std_height/np.sqrt(len(data)))

# Hypothesis Testing
# Null Hypothesis: Mean height is equal to 170
# Alternative Hypothesis: Mean height is different from 170
t_stat, p_value = stats.ttest_1samp(data['Height'], 170)
alpha = 0.05
reject_null = p_value < alpha

# Critical Region, Level of Significance, Error Types
critical_region = (-np.inf, stats.t.ppf(1 - alpha/2, df=len(data)-1))
level_of_significance = alpha
type_1_error = "Rejecting the null hypothesis when it is true (False Positive)"
type_2_error = "Failing to reject the null hypothesis when it is false (False Negative)"

# Feature Selection Using P-values
# Hypothesis Test: Is height a significant predictor of weight?
t_stat_height_weight, p_value_height_weight = stats.ttest_ind(data['Height'], data['Weight'])
significant_predictor = p_value_height_weight < alpha

# Print results
print(f"Descriptive Statistics:")
print(f"Mean Height: {mean_height}, Median Height: {median_height}, Standard Deviation Height: {std_height}, Range Height: {range_height}")
print(f"Mean Weight: {mean_weight}, Median Weight: {median_weight}, Standard Deviation Weight: {std_weight}, Range Weight: {range_weight}")
print(f"\nProbability:")
print(f"Probability of being taller than 180 cm: {probability_taller}")
print(f"\nConfidence Interval (95%): {confidence_interval}")
print(f"\nHypothesis Testing:")
print(f"T-statistic: {t_stat}, P-value: {p_value}, Reject Null Hypothesis: {reject_null}")
print(f"\nCritical Region: {critical_region}, Level of Significance: {level_of_significance}")
print(f"Type 1 Error: {type_1_error}")
print(f"Type 2 Error: {type_2_error}")
print(f"\nFeature Selection Using P-values:")
print(f"T-statistic (Height vs Weight): {t_stat_height_weight}, P-value (Height vs Weight): {p_value_height_weight}, Significant Predictor: {significant_predictor}")
